// assign default values
var $http                = require('./http.js'),
METHOD                   = 'POST',
CUSTOM_URL               = '/user/renew',
DEFAULT_RENEW_EXPIRATION = 2,
DEFAULT_RESPONSE_OBJECT  = {
  success: false
};
/**
 * method to get new keys and id from api
 * @param  {Object}   session  -> session data with keys appuser and expiration. may or may not be with passport
 * @param  {Function} next     -> callback function that passes an obj as argument
 * @return {Object}            -> the value to be passed as argument in the callback function. has success property that defaults to false
 *                                if query to api fails, otherwise success is true with additional more properties.
 *                                 cookieObj property has values that are to be stored in the cookie
 *                                 resObj property has values that are to be send to the client side
 */
module.exports = function(session, next) {

  if(session && session.appuser !== undefined) {
    var data = {
      appuser: session.appuser,
      expiration: DEFAULT_RENEW_EXPIRATION
    };

    var config = {
      method: METHOD,
      path: CUSTOM_URL,
      data: data,
      headers: []
    };

    $http(config)
    .then(function (data) {
      if(data.hasOwnProperty('apiId') && data.hasOwnProperty('apiKey')) {
        var keyExpiration = DEFAULT_RENEW_EXPIRATION * 60 * 1000,
            newId         = data.apiId,
            newKey        = data.apiKey;

        DEFAULT_RESPONSE_OBJECT.success   = true;
        DEFAULT_RESPONSE_OBJECT.cookieObj = {
          maxAge: keyExpiration,
          newId: newId,
          newKey: newKey,
          tempIdCreatedAt: new Date()
        }
        DEFAULT_RESPONSE_OBJECT.resObj     = {
          id: newId,
          key: newKey,
          ms: keyExpiration
        }
      }
      next(DEFAULT_RESPONSE_OBJECT);
    })
    .catch(function (err) {
      next(DEFAULT_RESPONSE_OBJECT);
    });
  } else {
    next(DEFAULT_RESPONSE_OBJECT);
  }
}