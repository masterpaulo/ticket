var $http = require('./http.js');

var REQUEST;

REQUEST = function(url, method, data) {
  this.url = url;
  this.method = method;
  this.data = data;
  this.params = [];
};

REQUEST.prototype.limit = function(int) {
  if (int !== void 0 || int !== null) {
    //this.params.push("limit=" + int);
    this.params.push({
      key: "limit",
      value: int
    })
  }
  return this;
};

REQUEST.prototype.sort = function(key) {
  if (key) {
    //this.params.push("sort=" + key);
    this.params.push({
      key: "sort",
      value: key
    })
  }
  return this;
};

REQUEST.prototype.populate = function(key) {
  if (key) {
    //this.params.push("populate=" + key);
    this.params.push({
      key: "populate",
      value: key
    })
  }
  return this;
};

REQUEST.prototype.page = function(int) {
  if (int !== void 0 || int !== null) {
    //this.params.push("page=" + int);
    this.params.push({
      key: "page",
      value: int
    })
  }
  return this;
};

REQUEST.prototype.skip = function(int) {
  if (int !== void 0 || int !== null) {
    //this.params.push("skip=" + int);
    this.params.push({
      key: "skip",
      value: int
    })
  }
  return this;
};

REQUEST.prototype.exec = function(callback) {
  var ajax, config, credentials, header, url;
  //url = meditabApiUrl.api + (meditabApiUrl.port !== 80 ? ":" + meditabApiUrl.port : "") + "/" + this.url;
  url = this.url;
  config = {
    method: this.method,
    path: url,
    params:[],
    headers:[],
    data: this.data
  };
  /*
  CUSTOMER HEADERS CONFIG TO BE ADDED LATER
  if (this.headers.length){
    config.headers = this.headers
  }

  this.headers = []
  sample content
  {
    key: "ajax",
    value: true
  }
  */
  if (this.params.length) {
    //url += "?" + this.params.join("&");
    config.params = this.params;
  }
  
  $http(config)
  .then(function(data){
    callback(null,(data.rows?data.rows:data))
  })
  .catch(function(error){
    callback(error,null);
  })
  
};

module.exports = REQUEST;