/*
config = {
	method: "GET | POST | PUT | DELETE",
	path: "URL",
	headers:{
		"api":"sample"
	},
	data: DATA_OBJECT,
	params:[
		{
			key:"populate",
			value: "something"
		}
	]
}

params will be connected to the URL after adding " ? "
*/
var hawk = require('hawk'),
	http = require("http"),
	meditab = null;

var processUrl = function(path,params){
	
	var url = "";

	if(path[0] == "/"){
		path = path.substring(1);
	}
	if(path[path.length - 1] == "/"){
		path = path.substring(0,(path.length - 1));
	}

	/*if(meditab.port && meditab.port != 80){
		url+=(":"+meditab.port);
	}*/
	if(path){
		url+=("/"+path);
	}

	var paramsPrepare = [];
	if(params && params.length){
		params.forEach(function(p){
			paramsPrepare.push( p.key+"="+p.value );
		});
		url+=("?"+paramsPrepare.join("&"));
	}
	return url
}

var authorize = function(options){
	var url = "http://"+options.host+(options.port == 80 ? "":(":"+options.port))+options.path,
		method = options.method;
	head = hawk.client.header(url,method,{credentials:meditab.credentials});
	return head.field;
}


module.exports = function(config){

	

	meditab = process.MEDITAB();

	if(meditab.credentials){
		
		meditab.credentials.algorithm = "sha256";


		var promise = new Promise(function(resolve,reject){

			var options = {
				host: meditab.host,
				headers:{
					'Authorization':null
				}
			};

			options.method = config.method;
			options.path = processUrl(config.path,config.params);
			options.port = (config.port || meditab.port);
			payload = config.data

			if(config.headers){
				/*
					configure headers
				*/
				for(var key in config.headers){
					options.headers[key] = config.headers[key];
				}
			}
		

			options.headers.Authorization = authorize(options);

			console.log(options.method.toUpperCase(),":",options.path);

			req = http.request(options,function(response){
				response.setEncoding("utf8");
				complete = ""
				response.on("data",function(data){
					complete+=data;
				});
				response.on("end",function(){
					try{
						var parsedData = JSON.parse(complete);
						resolve(parsedData);
					}catch(err){
						reject(err);
					}
				})
			})

			req.on("error",function(e){
				var r = e;
				if(e && typeof e == "string"){
					r = JSON.parse(e);
					reject(r);
				}
				
			})
			if (payload !== undefined) {
			  	req.write(JSON.stringify(payload),'utf8');
			}
			req.end()
		})

		return promise;


	}else{
		var err = {
			error: "API CREDENTIALS does not exist"
		};
		return err;
	}
}